// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class SinglyLinkedList {
    
    private ListNode head;
    
    private static class ListNode {
        
        private int data;
        private ListNode next;
        
        public ListNode(int data) {
            this.data = data;
            this.next = null;
        }
    }
    
    public void display() {
        ListNode current = head;
        
        while(current != null) {
            System.out.print(current.data + "->");
            current = current.next;
        }
        System.out.println("null");
    }

    //Floyds cycle detection algorithm
   public static ListNode mergeTwoSortedList(ListNode a, ListNode b) {
       
      ListNode dummyNode = new ListNode(4); //node value doesnt matter
      ListNode dummyPointer = dummyNode;
       
       while(a != null && b != null) {
           if(a.data <= b.data) {
               dummyPointer.next = a;
               dummyPointer = a;
               a = a.next;
               
           } else {
               dummyPointer.next = b;
               dummyPointer = b;
               b = b.next;
           }
       }
       
       if(b == null ) {
           dummyPointer.next = a;
       }
       
      if(a == null ) {
           dummyPointer.next = b;
       }
       
       return dummyNode.next;
    }

    public static void main(String[] args) {
        SinglyLinkedList sllA = new SinglyLinkedList();
        SinglyLinkedList sllB = new SinglyLinkedList();
        
        sllA.head = new ListNode(1);
        ListNode secondA = new ListNode(4);
        ListNode thirdA = new ListNode(5);
        ListNode fourthA = new ListNode(7);
        ListNode fifthA = new ListNode(8);
        
        sllA.head.next = secondA;
        secondA.next = thirdA;
        thirdA.next = fourthA;
        fourthA.next = fifthA;

        sllB.head = new ListNode(2);
        ListNode secondB = new ListNode(3);
        ListNode thirdB = new ListNode(6);

        sllB.head.next = secondB;
        secondB.next = thirdB;

        sllA.display();
        sllB.display();
        
        SinglyLinkedList result = new SinglyLinkedList();
        result.head = mergeTwoSortedList(sllA.head, sllB.head);
        result.display();
    }
}